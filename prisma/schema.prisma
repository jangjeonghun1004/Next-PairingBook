generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String                  @id @default(cuid())
  name           String?
  email          String                  @unique
  emailVerified  DateTime?
  password       String
  image          String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  accounts       Account[]
  comments       Comment[]
  discussions    Discussion[]
  participations DiscussionParticipant[]
  sessions       Session[]
  stories        Story[]
  followers      UserFollow[]            @relation("follower")
  following      UserFollow[]            @relation("following")
  userLikes      UserLike[]
  sentMessages   Message[]               @relation("sender")
  receivedMessages Message[]             @relation("receiver")
  conversationsAsInitiator Conversation[] @relation("initiator")
  conversationsAsParticipant Conversation[] @relation("participant")
  sentNotes      Note[]                  @relation("noteSender")
  receivedNotes  Note[]                  @relation("noteReceiver")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Story {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  content      String
  category     String
  image_urls   String[]
  likes        Int        @default(0)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  authorId     String     @map("author_id")
  commentCount Int        @default(0) @map("comment_count")
  comments     Comment[]
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  userLikes    UserLike[]

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
}

model UserLike {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id")
  storyId   String   @map("story_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  storyId   String   @map("story_id") @db.Uuid
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([storyId])
  @@index([createdAt])
}

model Discussion {
  id              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  content         String
  bookTitle       String                  @map("book_title")
  bookAuthor      String                  @map("book_author")
  tags            String[]
  imageUrls       String[]                @map("image_urls")
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @updatedAt @map("updated_at")
  authorId        String                  @map("author_id")
  maxParticipants Int?                    @default(10) @map("max_participants")
  scheduledAt     DateTime?               @map("scheduled_at")
  privacy         String
  topics          String[]
  author          User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  participants    DiscussionParticipant[]

  @@index([authorId])
  @@index([createdAt])
}

model DiscussionParticipant {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status       String     @default("pending")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  userId       String     @map("user_id")
  discussionId String     @map("discussion_id") @db.Uuid
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId])
  @@index([userId])
  @@index([discussionId])
  @@index([status])
}

model UserFollow {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  senderId    String   @map("sender_id")
  receiverId  String   @map("receiver_id")
  isRead      Boolean  @default(false) @map("is_read")
  readAt      DateTime? @map("read_at")
  conversationId String @map("conversation_id") @db.Uuid
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
  @@index([createdAt])
  @@index([isRead])
}

model Conversation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastActivityAt DateTime @default(now()) @map("last_activity_at")
  initiatorId   String   @map("initiator_id")
  participantId String   @map("participant_id")
  initiatorUnreadCount Int @default(0) @map("initiator_unread_count")
  participantUnreadCount Int @default(0) @map("participant_unread_count")
  initiatorDeleted Boolean @default(false) @map("initiator_deleted")
  participantDeleted Boolean @default(false) @map("participant_deleted")
  initiator     User     @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  participant   User     @relation("participant", fields: [participantId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@index([initiatorId])
  @@index([participantId])
  @@index([lastActivityAt])
}

model Note {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  content         String
  createdAt       DateTime  @default(now()) @map("created_at")
  senderId        String    @map("sender_id")
  receiverId      String    @map("receiver_id")
  isRead          Boolean   @default(false) @map("is_read")
  readAt          DateTime? @map("read_at")
  senderDeleted   Boolean   @default(false) @map("sender_deleted")
  receiverDeleted Boolean   @default(false) @map("receiver_deleted")
  sender          User      @relation("noteSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User      @relation("noteReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([isRead])
}
